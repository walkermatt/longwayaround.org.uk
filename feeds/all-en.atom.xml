<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>longwayaround.org.uk</title><link href="https://longwayaround.org.uk/" rel="alternate"></link><link href="https://longwayaround.org.uk/feeds/all-en.atom.xml" rel="self"></link><id>https://longwayaround.org.uk/</id><updated>2022-06-22T21:56:00+01:00</updated><subtitle>taking the scenic route and enjoying the journey</subtitle><entry><title>Writing small text filters for the shell and Vim</title><link href="https://longwayaround.org.uk/notes/writing-small-text-filters-for-the-shell-and-vim/" rel="alternate"></link><published>2022-06-22T21:56:00+01:00</published><updated>2022-06-22T21:56:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2022-06-22:/notes/writing-small-text-filters-for-the-shell-and-vim/</id><summary type="html">&lt;p&gt;Text filters are command-line programs that take text as input, transform it then output the results. An example of a common built in text filter is &lt;tt class="docutils literal"&gt;sort&lt;/tt&gt; which when passed newline separated text will sort each line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b\nc\na&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can write your own text filter scripts â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Text filters are command-line programs that take text as input, transform it then output the results. An example of a common built in text filter is &lt;tt class="docutils literal"&gt;sort&lt;/tt&gt; which when passed newline separated text will sort each line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b\nc\na&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can write your own text filter scripts; this is an example from my &lt;a class="reference external" href="https://github.com/walkermatt/dotbin"&gt;~/.bin&lt;/a&gt; directory which can be used to filter JSON text. It supports pretty printing the output as well as removing any formatting so that the JSON text is all on one line.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;jsonformat&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--indent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;indent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--squash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;squash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;infile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;
        &lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;infile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;infile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; [infile [outfile]]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;squash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;separators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Python script makes use of the Python 3 &lt;tt class="docutils literal"&gt;json&lt;/tt&gt; package for reading and writing JSON and supports reading from standard input (&lt;tt class="docutils literal"&gt;stdin&lt;/tt&gt;) or a file and writing to standard out (&lt;tt class="docutils literal"&gt;stdout&lt;/tt&gt;) or file.&lt;/p&gt;
&lt;p&gt;Assuming a file called &lt;tt class="docutils literal"&gt;feature.json&lt;/tt&gt; it can be pretty printed with an indentation of &lt;tt class="docutils literal"&gt;2&lt;/tt&gt; spaces to &lt;tt class="docutils literal"&gt;stdout&lt;/tt&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jsonformat --indent &lt;span class="m"&gt;2&lt;/span&gt; features.json
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="mf"&gt;-2.407379150390625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mf"&gt;52.36302183361385&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="mf"&gt;-2.3258399963378906&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mf"&gt;52.36302183361385&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="mf"&gt;-2.3258399963378906&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mf"&gt;52.41488029514571&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="mf"&gt;-2.407379150390625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mf"&gt;52.41488029514571&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="mf"&gt;-2.407379150390625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mf"&gt;52.36302183361385&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Polygon&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Wyre Forest&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FeatureCollection&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or output with formatting removed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jsonformat --squash features.json
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="mf"&gt;-2.407379150390625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;52.36302183361385&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;-2.3258399963378906&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;52.36302183361385&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;-2.3258399963378906&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;52.41488029514571&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;-2.407379150390625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;52.41488029514571&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;-2.407379150390625&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;52.36302183361385&lt;/span&gt;&lt;span class="p"&gt;]]],&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Polygon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Wyre Forest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FeatureCollection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="use-in-vim"&gt;
&lt;h2&gt;Use in Vim&lt;/h2&gt;
&lt;p&gt;Assuming the script is in your system path it can then be used from within Vim to filter text within a buffer.&lt;/p&gt;
&lt;div class="section" id="format-program-formatprg"&gt;
&lt;h3&gt;Format program (&lt;tt class="docutils literal"&gt;formatprg&lt;/tt&gt;)&lt;/h3&gt;
&lt;p&gt;Add the following to your &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; to set &lt;tt class="docutils literal"&gt;jsonformat&lt;/tt&gt; as the &lt;a class="reference external" href="https://vimhelp.org/options.txt.html#%27formatprg%27"&gt;format program&lt;/a&gt; for JSON files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; json &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;formatprg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;jsonformat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you have a buffer with a file type of JSON open you can then use &lt;tt class="docutils literal"&gt;gq&lt;/tt&gt; followed by a motion to invoke the format program. You can also select lines in visual mode and use &lt;tt class="docutils literal"&gt;gq&lt;/tt&gt; to format just those lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="execute-shell-command"&gt;
&lt;h3&gt;Execute shell command (&lt;tt class="docutils literal"&gt;:!&lt;/tt&gt;)&lt;/h3&gt;
&lt;p&gt;It's also possible to select lines in visual mode then call &lt;tt class="docutils literal"&gt;jsonformat&lt;/tt&gt; &lt;a class="reference external" href="https://vimhelp.org/various.txt.html#%3A%21"&gt;via the command-line mode&lt;/a&gt; (the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'&amp;lt;,'&amp;gt;&lt;/span&gt;&lt;/tt&gt; are inserted for you and represent the range of the currently selected lines):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;!&lt;/span&gt;jsonformat &lt;span class="p"&gt;--&lt;/span&gt;squash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach has the advantage of allowing options to be specified such as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--squash&lt;/span&gt;&lt;/tt&gt; in the above example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="vim"></category><category term="bash"></category><category term="sh"></category><category term="python"></category></entry><entry><title>MapServer PostGIS Performance</title><link href="https://longwayaround.org.uk/notes/mapserver-postgis-performance/" rel="alternate"></link><published>2019-09-20T12:00:00+01:00</published><updated>2019-09-20T12:00:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2019-09-20:/notes/mapserver-postgis-performance/</id><summary type="html">&lt;p&gt;Recently I was looking at improving the performance of rendering a &lt;a class="reference external" href="https://github.com/spacesyntax/OpenMapping"&gt;Space Syntax OpenMapping&lt;/a&gt; layer in MapServer. The &lt;code&gt;openmapping_gb_v1&lt;/code&gt; table is in a PostGIS database with an index on the geometry column. The original MapServer &lt;code&gt;DATA&lt;/code&gt; configuration looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATA &amp;quot;wkb_geometry from (select meridian_class_scale * 10 as line_width, * from openmapping â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recently I was looking at improving the performance of rendering a &lt;a class="reference external" href="https://github.com/spacesyntax/OpenMapping"&gt;Space Syntax OpenMapping&lt;/a&gt; layer in MapServer. The &lt;code&gt;openmapping_gb_v1&lt;/code&gt; table is in a PostGIS database with an index on the geometry column. The original MapServer &lt;code&gt;DATA&lt;/code&gt; configuration looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATA &amp;quot;wkb_geometry from (select meridian_class_scale * 10 as line_width, * from openmapping.openmapping_gb_v1 order by choice2kmrank) as a using unique fid using srid=27700&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main thing to note is that the rows are sorted by the &lt;code&gt;choice2kmrank&lt;/code&gt; value to ensure features are rendered in the correct order (a similar problem as described in &lt;a class="reference external" href="http://mapgears.com/en/blog/archive/2013-03-05-roads_network_mapping"&gt;Mapping a road network with MapServer - Understanding the display order&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This SQL results in the following query being executed by MapServer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;choice2kmrank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;line_width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_AsBinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Force_2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;wkb_geometry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NDR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;fid&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;meridian_class_scale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;line_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;openmapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openmapping_gb_v1&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;choice2kmrank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;wkb_geometry&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ST_GeomFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POLYGON((441580.992440577 112973.855285226,441580.992440577 115008.987681971,443621.486046148 115008.987681971,443621.486046148 112973.855285226,441580.992440577 112973.855285226))&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27700&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two issues with the original query performance-wise:&lt;/p&gt;
&lt;div class="section" id="ordering-too-many-rows"&gt;
&lt;h2&gt;1. Ordering too many rows&lt;/h2&gt;
&lt;p&gt;The order by clause is within the inner query, so it sorts all rows in &lt;code&gt;openmapping.openmapping_gb_v1&lt;/code&gt;, not just those that fall within the spatial filter. This is fine for tables with a small number of rows, but has a significant impact for larger tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spatial-index-not-being-used"&gt;
&lt;h2&gt;2. Spatial index not being used&lt;/h2&gt;
&lt;p&gt;By default MapServer represents the spatial filter as an inline geometry, which often results in Postgres applying the bounding box spatial filter without using the spatial index. This can be seen here when running &lt;code&gt;EXPLAIN SELECT ...&lt;/code&gt; to generate an execution plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Ideally we want to only sort those rows returned by the spatial filter, as well as having the spatial filter use the spatial index.&lt;/p&gt;
&lt;p&gt;MapServer provides a special &lt;code&gt;!BOX!&lt;/code&gt; placeholder that can be inserted into a SQL query, which dictates where the &lt;code&gt;ST_GeomFromText('POLGON...&lt;/code&gt; statement appears when MapServer constructs the SQL to execute. At the time of writing the &lt;code&gt;!BOX!&lt;/code&gt; placeholder is described in &lt;a class="reference external" href="https://mapserver.org/input/vector/postgis.html#data-access-connection-method"&gt;the last example in the PostGIS Data Access documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By using the &lt;code&gt;!BOX!&lt;/code&gt; placeholder we can combine the spatial filter and sort into a single select statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATA &amp;quot;wkb_geometry from (select meridian_class_scale * 10 as line_width, * from openmapping.openmapping_gb_v1 where wkb_geometry &amp;amp;&amp;amp; !BOX! order by choice2kmrank) as a using unique fid using srid=27700&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Results in MapServer generating:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;choice2kmrank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;line_width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_AsBinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Force_2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;wkb_geometry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NDR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;fid&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;meridian_class_scale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;line_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;openmapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openmapping_gb_v1&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;wkb_geometry&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ST_GeomFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POLYGON((441580.992440577 112973.855285226,441580.992440577 115008.987681971,443621.486046148 115008.987681971,443621.486046148 112973.855285226,441580.992440577 112973.855285226))&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27700&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;choice2kmrank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To improve the likelihood that the spatial index is used, we can use a technique described by &lt;a class="reference external" href="https://gis.stackexchange.com/users/429/john-powell"&gt;John Powell&lt;/a&gt; in &lt;a class="reference external" href="https://gis.stackexchange.com/a/253987/6004"&gt;this gis.stackexchange.com answer&lt;/a&gt;, which involves moving the geometry creation to a &lt;a class="reference external" href="https://www.postgresql.org/docs/11/queries-with.html"&gt;CTE (Common Table Expression)&lt;/a&gt; resulting in the query optimiser having prior knowledge of the geometry which generally results in the spatial index being used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATA &amp;quot;wkb_geometry from (WITH box (geom) AS (SELECT !BOX! as geom) SELECT fid, wkb_geometry, choice2kmrank, meridian_class_scale * 10 AS line_width FROM openmapping.openmapping_gb_v1, box WHERE wkb_geometry &amp;amp;&amp;amp; box.geom ORDER BY choice2kmrank) as a using unique fid using srid=27700&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Results in MapServer generating:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;choice2kmrank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;line_width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_AsBinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST_Force_2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;wkb_geometry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NDR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;fid&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ST_GeomFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POLYGON((441580.992440577 112973.855285226,441580.992440577 115008.987681971,443621.486046148 115008.987681971,443621.486046148 112973.855285226,441580.992440577 112973.855285226))&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27700&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;wkb_geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;choice2kmrank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;meridian_class_scale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;line_width&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;openmapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openmapping_gb_v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;box&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;wkb_geometry&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;choice2kmrank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this change we're now using the spatial index when applying the spatial filter, then only sorting the filtered rows. In my case the query execution time went from several seconds to less than 500ms with identical results.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="https://twitter.com/devsupportman"&gt;Peter Goulborn&lt;/a&gt; and &lt;a class="reference external" href="https://twitter.com/ijturton"&gt;Ian Turton&lt;/a&gt; for their help getting to the final solution.&lt;/p&gt;
&lt;/div&gt;
</content><category term="mapserver"></category><category term="postgres"></category><category term="postgis"></category><category term="notes"></category></entry><entry><title>Postgres Information Functions</title><link href="https://longwayaround.org.uk/notes/postgres-information-functions/" rel="alternate"></link><published>2017-02-18T07:55:00+00:00</published><updated>2017-02-18T07:55:00+00:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2017-02-18:/notes/postgres-information-functions/</id><summary type="html">&lt;p&gt;Postgres contains a wealth of functions that provide information about a database and the objects within. The &lt;a class="reference external" href="https://www.postgresql.org/docs/current/static/functions-info.html/"&gt;System Information Functions of the official documention&lt;/a&gt; provides a full list. There are a huge number of functions covering a whole host of info from the current database session, privileges, function properties.&lt;/p&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples â€¦&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Postgres contains a wealth of functions that provide information about a database and the objects within. The &lt;a class="reference external" href="https://www.postgresql.org/docs/current/static/functions-info.html/"&gt;System Information Functions of the official documention&lt;/a&gt; provides a full list. There are a huge number of functions covering a whole host of info from the current database session, privileges, function properties.&lt;/p&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;div class="section" id="find-an-objects-oid"&gt;
&lt;h3&gt;Find an objects oid&lt;/h3&gt;
&lt;p&gt;A lot of the info functions accept the &lt;a class="reference external" href="https://www.postgresql.org/docs/current/static/datatype-oid.html/"&gt;Object Identifier Type&lt;/a&gt; for objects in the database. This can be obtained by casting to &lt;code&gt;regclass&lt;/code&gt; (also described in the  &lt;a class="reference external" href="https://www.postgresql.org/docs/current/static/datatype-oid.html/"&gt;oid docs&lt;/a&gt;) then to &lt;code&gt;oid&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;schema_name.relation_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regclass&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;oid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;relation_name&lt;/code&gt; is a table, view, index etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="view-definition"&gt;
&lt;h3&gt;View definition&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_get_viewdef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schema_name.view_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regclass&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;oid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or in &lt;code&gt;psql&lt;/code&gt; you can use one of the built in commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;schema_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="function-definition"&gt;
&lt;h3&gt;Function definition&lt;/h3&gt;
&lt;p&gt;Returns the function definition for a given function. Many built-in functions don't reveal much due to them not being written in SQL but for those that are you'll get the complete create function statement. For example to view the definition of the PostGIS &lt;code&gt;st_colormap&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;pg_get_functiondef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;st_colormap(raster, integer, text, text)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regprocedure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="privileges"&gt;
&lt;h3&gt;Privileges&lt;/h3&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://www.postgresql.org/docs/current/static/functions-info.html#FUNCTIONS-INFO-ACCESS-TABLE/"&gt;whole host of functions exist to determine privileges for schemas, tables, functions etc.&lt;/a&gt; Some examples:&lt;/p&gt;
&lt;p&gt;Determine if the current users can select from a table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;has_table_privilege&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schema_name.relation_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: The docs state that &amp;quot;multiple privilege types can be listed separated by commas, in which case the result will be true if any of the listed privileges is held&amp;quot;. This means that in order to test a number of privileges it is normally better to test each privilege individually as &lt;code&gt;select has_table_privilege('schema_name.relation_name', 'select,update');&lt;/code&gt; would return &lt;code&gt;t&lt;/code&gt; even if only &lt;code&gt;select&lt;/code&gt; is supported.&lt;/p&gt;
&lt;p&gt;Determine if a user can use a schema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;has_schema_privilege&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schema_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;usage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="postgres"></category><category term="notes"></category></entry><entry><title>OpenLayers 2 Custom Build</title><link href="https://longwayaround.org.uk/notes/openlayers-2-custom-build/" rel="alternate"></link><published>2016-04-26T14:00:00+01:00</published><updated>2016-04-26T14:00:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2016-04-26:/notes/openlayers-2-custom-build/</id><summary type="html">&lt;p&gt;A bit of a blast from the past now that OpenLayers 3 has been released but it may be useful for someone who is working on or maintaining an OpenLayer 2 project.&lt;/p&gt;
&lt;p&gt;Create a list of OpenLayers 2 classes used within a code base suitable for including in a &lt;a class="reference external" href="http://docs.openlayers.org/library/deploying.html#custom-build-profiles"&gt;custom â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A bit of a blast from the past now that OpenLayers 3 has been released but it may be useful for someone who is working on or maintaining an OpenLayer 2 project.&lt;/p&gt;
&lt;p&gt;Create a list of OpenLayers 2 classes used within a code base suitable for including in a &lt;a class="reference external" href="http://docs.openlayers.org/library/deploying.html#custom-build-profiles"&gt;custom build profile&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/your/js/
grep --ignore-case --recursive --no-filename --only-matching &lt;span class="s1"&gt;&amp;#39;new OpenLayers\.[a-z0-9\.]*&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
sed -e &lt;span class="s1"&gt;&amp;#39;s/new //&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/\./\//g&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/$/\.js/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
sort &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
uniq
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="explanation"&gt;
&lt;h2&gt;Explanation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Find instances of &lt;code&gt;new OpenLayers.FOO&lt;/code&gt; in all source files below the current directory using &lt;code&gt;grep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;&amp;quot;new &amp;quot;&lt;/code&gt; from each matching line, replace the dots which separate the parts of the class name with forward slashes and add &lt;code&gt;.js&lt;/code&gt; to the end to complete the path all using &lt;code&gt;sed&lt;/code&gt; (each &lt;code&gt;-e&lt;/code&gt; applies an expression to each line)&lt;/li&gt;
&lt;li&gt;Sort the list with &lt;code&gt;sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove duplicates with &lt;code&gt;uniq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="caveats"&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;div class="section" id="vector-renderers"&gt;
&lt;h3&gt;Vector Renderers&lt;/h3&gt;
&lt;p&gt;If you find &lt;code&gt;OpenLayers/Layer/Vector.js&lt;/code&gt; in the list then the vector rendering classes will need to be included manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;OpenLayers/Renderer/Canvas.js&lt;/span&gt;
&lt;span class="na"&gt;OpenLayers/Renderer/SVG.js&lt;/span&gt;
&lt;span class="na"&gt;OpenLayers/Renderer/VML.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="utility-classes"&gt;
&lt;h3&gt;Utility Classes&lt;/h3&gt;
&lt;p&gt;If you are using classes such as &lt;code&gt;OpenLayers.Pixel&lt;/code&gt;, &lt;code&gt;OpenLayers.LonLat&lt;/code&gt;. You will find that when using the build script you get an error as the source files can not be found as the class names do not match the location in the OpenLayers source. In most cases for these base classes you can simply remove them from the build config file as they will be automatically included as they are referenced by the other classes such as &lt;code&gt;OpenLayers.Map&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="openlayer2"></category><category term="notes"></category></entry><entry><title>Testing Python &amp; Postgres</title><link href="https://longwayaround.org.uk/notes/testing-python-postgres/" rel="alternate"></link><published>2015-10-12T21:00:00+01:00</published><updated>2015-10-12T21:00:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2015-10-12:/notes/testing-python-postgres/</id><summary type="html">&lt;p&gt;I recently pulled together &lt;a class="reference external" href="https://github.com/walkermatt/python-postgres-testing-demo/"&gt;a project to demonstrate testing Python functions that interact with a Postgres database&lt;/a&gt;. I find that this sort of thing crops up occasionally and the project is an attempt to distil the approach. The main points include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creating a fresh temporary database via testing.postgresql prior â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I recently pulled together &lt;a class="reference external" href="https://github.com/walkermatt/python-postgres-testing-demo/"&gt;a project to demonstrate testing Python functions that interact with a Postgres database&lt;/a&gt;. I find that this sort of thing crops up occasionally and the project is an attempt to distil the approach. The main points include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creating a fresh temporary database via testing.postgresql prior to running tests&lt;/li&gt;
&lt;li&gt;Setting up the temporary database via a script with required structure (schemas, tables, roles, functions etc.)&lt;/li&gt;
&lt;li&gt;Putting the database into a known state prior to running each individual test (populating tables with known data)&lt;/li&gt;
&lt;li&gt;Inspecting and making assertions about the state of the database once the function being tested has been executed&lt;/li&gt;
&lt;li&gt;Pausing tests using the debugger (&lt;code&gt;pdb&lt;/code&gt;) to connect to the temporary database (using &lt;code&gt;db.url()&lt;/code&gt; and &lt;code&gt;psql &amp;lt;url&amp;gt;&lt;/code&gt;) to inspect it's current state while testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;View the project on GitHub: &lt;a class="reference external" href="https://github.com/walkermatt/python-postgres-testing-demo/"&gt;walkermatt/python-postgres-testing-demo&lt;/a&gt;.&lt;/p&gt;
</content><category term="testing"></category><category term="python"></category><category term="postgres"></category><category term="notes"></category></entry><entry><title>Read-only Postgres database</title><link href="https://longwayaround.org.uk/notes/read-only-postgres-database/" rel="alternate"></link><published>2015-09-08T13:00:00+01:00</published><updated>2015-09-08T13:00:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2015-09-08:/notes/read-only-postgres-database/</id><summary type="html">&lt;p&gt;There are times when I've needed to effectively make a Postgres database read-only, for example after loading or updating reference data. In the past I've revoked permissions from database roles to achieve this but as &lt;a class="reference external" href="http://www.postgresql.org/message-id/5fe0d78bda51d7176940fb8e78739b54&amp;#64;biglumber.com"&gt;this post on the PostgreSQL list states, it's possible to do so by making all â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are times when I've needed to effectively make a Postgres database read-only, for example after loading or updating reference data. In the past I've revoked permissions from database roles to achieve this but as &lt;a class="reference external" href="http://www.postgresql.org/message-id/5fe0d78bda51d7176940fb8e78739b54&amp;#64;biglumber.com"&gt;this post on the PostgreSQL list states, it's possible to do so by making all transactions against the database read-only by default&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example assuming I have an &lt;code&gt;osdata&lt;/code&gt; database, I can alter it to set &lt;code&gt;default_transaction_read_only&lt;/code&gt; (&lt;a class="reference external" href="http://www.postgresql.org/docs/9.4/static/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-READ-ONLY"&gt;docs&lt;/a&gt;) to &lt;code&gt;true&lt;/code&gt; which will make future transitions read-only regardless of which login role connects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALTER DATABASE osdata SET &lt;span class="nv"&gt;default_transaction_read_only&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the name implies setting &lt;code&gt;default_transaction_read_only&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; only sets transactions to be read-only by default, a user can override or unset the setting on a per-session basis e.g. &lt;code&gt;set default_transaction_read_only = false;&lt;/code&gt;.&lt;/p&gt;
</content><category term="postgres"></category><category term="postgis"></category><category term="notes"></category></entry><entry><title>Loading PostGIS</title><link href="https://longwayaround.org.uk/notes/loading-postgis/" rel="alternate"></link><published>2014-11-20T00:00:00+00:00</published><updated>2014-11-20T00:00:00+00:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2014-11-20:/notes/loading-postgis/</id><summary type="html">&lt;p&gt;&lt;em&gt;Notes from a talk at PostGIS Day, London 20th Nov 2014.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="the-options"&gt;
&lt;h2&gt;The options&lt;/h2&gt;
&lt;p&gt;All support basic options such as specifying table names, schema, SRS etc.&lt;/p&gt;
&lt;div class="section" id="graphical"&gt;
&lt;h3&gt;Graphical&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://gothos.info/2014/03/loading-data-into-postgis-shapefiles/"&gt;shp2pgsql-gui&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Graphical interface to shp2pgsql tool shipped with PostGIS to load ESRI Shapefiles via pgAdmin III.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/zer0infinity/OGR2GUI"&gt;ogr2gui&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Graphical interface to &lt;code&gt;ogr2ogr&lt;/code&gt; command line utility â€¦&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Notes from a talk at PostGIS Day, London 20th Nov 2014.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="the-options"&gt;
&lt;h2&gt;The options&lt;/h2&gt;
&lt;p&gt;All support basic options such as specifying table names, schema, SRS etc.&lt;/p&gt;
&lt;div class="section" id="graphical"&gt;
&lt;h3&gt;Graphical&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://gothos.info/2014/03/loading-data-into-postgis-shapefiles/"&gt;shp2pgsql-gui&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Graphical interface to shp2pgsql tool shipped with PostGIS to load ESRI Shapefiles via pgAdmin III.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/zer0infinity/OGR2GUI"&gt;ogr2gui&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Graphical interface to &lt;code&gt;ogr2ogr&lt;/code&gt; command line utility. Windows only.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://docs.qgis.org/2.0/en/docs/training_manual/databases/db_manager.html"&gt;QGIS DB Manager&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Simple database management from QGIS, including creating schemas &amp;amp; tables, moving tables and importing. Supports multiple import formats. Shipped with QGIS.&lt;/dd&gt;
&lt;dt&gt;Proprietary&lt;/dt&gt;
&lt;dd&gt;Support for PostGIS is now fairly broad within proprietary products including Safe Software's FME, Cadcorp, MapInfo Easyloader, ESRI SDE etc. MapInfo and ESRI impose some constraints &amp;amp; conventions including their own metadata tables.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line"&gt;
&lt;h3&gt;Command Line&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://postgis.refractions.net/documentation/manual-2.0/using_postgis_dbmanagement.html#shp2pgsql_usage"&gt;shp2pgsql&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Fully featured ESRI Shapefile loader, supports specifying tablespace, null geometry handling, encoding etc. Shipped with PostGIS.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.gdal.org/ogr2ogr.html"&gt;ogr2ogr&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Swiss Army Knife of vector translation, supports many input formats and has good support for PostGIS. &lt;a class="reference external" href="http://www.gdal.org/drv_pg.html"&gt;PostGIS docs here&lt;/a&gt; and &lt;a class="reference external" href="http://www.gdal.org/drv_pg_advanced.html"&gt;here&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/AstunTechnology/Loader"&gt;Loader&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Loads GML such as Ordnance Survey data, uses &lt;code&gt;ogr2ogr&lt;/code&gt; under the hood.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.postgresql.org/docs/9.3/static/app-psql.html"&gt;psql&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Standard command line interface to PostgreSQL used to import from textual formats such as CSV via &lt;code&gt;COPY&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;All examples use the &lt;a class="reference external" href="http://www.naturalearthdata.com/"&gt;Natural Earth Vector data&lt;/a&gt;, a &lt;a class="reference external" href="http://kelso.it/x/nevector"&gt;full download&lt;/a&gt; is available if you'd like to follow along. Assumes loading into a database called &lt;code&gt;postgis&lt;/code&gt; with a &lt;code&gt;loader&lt;/code&gt; login role with the password set via the &lt;code&gt;PGPASSWORD&lt;/code&gt; environment variable: &lt;code&gt;PGPASSWORD=password&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;shp2pgsql&lt;/h3&gt;
&lt;p&gt;Load a Shapefile using &lt;code&gt;shp2pgsql&lt;/code&gt; and &lt;code&gt;psql&lt;/code&gt;. &lt;code&gt;shp2pgsql&lt;/code&gt; doesn't load into the database directly but instead outputs SQL which can then be loaded via &lt;code&gt;psql&lt;/code&gt;. This example pipes the SQL output by &lt;code&gt;shp2pgsql&lt;/code&gt; to stdout to &lt;code&gt;psql&lt;/code&gt; which executes it against the specified database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shp2pgsql -W LATIN1 &lt;span class="se"&gt;\&lt;/span&gt;
            -s &lt;span class="m"&gt;4326&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
            -I natural_earth_vector/10m_cultural/ne_10m_admin_0_countries.shp &lt;span class="se"&gt;\&lt;/span&gt;
            ne.ne_10m_admin_0_countries &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; psql -U loader -d postgis
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://prj2epsg.org/search"&gt;http://prj2epsg.org/search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ogr2ogr-f-postgresql"&gt;
&lt;h3&gt;ogr2ogr -f PostgreSQL&lt;/h3&gt;
&lt;p&gt;Load an equivalent Shapefile into PostGIS using &lt;code&gt;ogr2ogr&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ogr2ogr -f PostgreSQL &lt;span class="se"&gt;\&lt;/span&gt;
        PG:&lt;span class="s1"&gt;&amp;#39;dbname=postgis user=loader active_schema=ne&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        natural_earth_vector/10m_cultural/ne_10m_time_zones.shp &lt;span class="se"&gt;\&lt;/span&gt;
        -nlt PROMOTE_TO_MULTI
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tips"&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;div class="section" id="use-copy-for-speed"&gt;
&lt;h3&gt;Use COPY for Speed&lt;/h3&gt;
&lt;p&gt;When loading large quantities of data both &lt;code&gt;shp2pgsql&lt;/code&gt; and &lt;code&gt;ogr2ogr&lt;/code&gt; support loading via PostgreSQL Dump format. This involves bulk loading of rows in a textual CSV like format using the &lt;code&gt;COPY&lt;/code&gt; command which can be much quicker than &lt;code&gt;INSERT&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;Enabling Dump format with &lt;code&gt;shp2pgsql&lt;/code&gt; is as simple as specifying the &lt;code&gt;-D&lt;/code&gt; flag (&lt;code&gt;shp2pgsql -D ...&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;ogr2ogr&lt;/code&gt; use the &lt;code&gt;PGDump&lt;/code&gt; output format with the &lt;code&gt;PG_USE_COPY&lt;/code&gt; config set to &lt;code&gt;YES&lt;/code&gt;. The are a number of layer creation (&lt;code&gt;-lco&lt;/code&gt;) and config options detailed on the &lt;a class="reference external" href="http://www.gdal.org/drv_pgdump.html"&gt;PGDump driver page&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ogr2ogr -f PGDump &lt;span class="se"&gt;\&lt;/span&gt;
        --config PG_USE_COPY YES &lt;span class="se"&gt;\&lt;/span&gt;
        -lco &lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ne &lt;span class="se"&gt;\&lt;/span&gt;
        -lco &lt;span class="nv"&gt;create_schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off &lt;span class="se"&gt;\&lt;/span&gt;
        /vsistdout/ &lt;span class="se"&gt;\&lt;/span&gt;
        natural_earth_vector/10m_cultural/ne_10m_admin_1_states_provinces_shp.shp &lt;span class="se"&gt;\&lt;/span&gt;
        -nlt PROMOTE_TO_MULTI &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; psql -U loader -d postgis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When loading multi file datasets such as Ordnance Survey &lt;a class="reference external" href="http://www.ordnancesurvey.co.uk/business-and-government/products/topography-layer.html"&gt;OSMM Topography Layer&lt;/a&gt; or &lt;a class="reference external" href="http://www.ordnancesurvey.co.uk/business-and-government/products/vectormap-local.html"&gt;VectorMap Local&lt;/a&gt; the general approach is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create schema and empty tables&lt;/li&gt;
&lt;li&gt;Load each source file via COPY&lt;/li&gt;
&lt;li&gt;Create indexes, vacuum etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of this workflow for VectorMap Local can be found in the &lt;a class="reference external" href="https://github.com/AstunTechnology/Loader/tree/master/extras/ordnancesurvey/vml/pgdump"&gt;Loader repository&lt;/a&gt;. Deferring the creation of indexes can also improve performance significantly as it avoids the database continually rebuilding the indexes during load. In this instance the &lt;code&gt;ogr2ogr&lt;/code&gt; command might look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ogr2ogr --config PG_USE_COPY YES &lt;span class="se"&gt;\&lt;/span&gt;
        -lco &lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ne &lt;span class="se"&gt;\&lt;/span&gt;
        -lco &lt;span class="nv"&gt;create_schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off &lt;span class="se"&gt;\&lt;/span&gt;
        -lco &lt;span class="nv"&gt;create_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off &lt;span class="se"&gt;\&lt;/span&gt;
        -lco &lt;span class="nv"&gt;spatial_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off &lt;span class="se"&gt;\&lt;/span&gt;
        -f PGDump &lt;span class="se"&gt;\&lt;/span&gt;
        /vsistdout/ &lt;span class="se"&gt;\&lt;/span&gt;
        /path/to/source.gml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A benefit of this approach is that you can also fine tune the column types and provide support for date fields which &lt;code&gt;ogr2ogr&lt;/code&gt; doesn't natively understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parallel-processing"&gt;
&lt;h3&gt;Parallel Processing&lt;/h3&gt;
&lt;p&gt;Databases are designed to handle lots of concurrent activity and can easily handle more than one process loading data at the same time. Often load performance can be improved by running several &lt;code&gt;shp2pgsql&lt;/code&gt; or &lt;code&gt;ogr2ogr&lt;/code&gt; processes at a time. This can be done manually but for large datasets this becomes a pain, lucky on *unix systems we have &lt;a class="reference external" href="http://www.gnu.org/software/parallel/"&gt;GNU Parallel&lt;/a&gt; which can automate it for use. A &lt;a class="reference external" href="../gnu-parallel-all-the-things/"&gt;previous post&lt;/a&gt; has covered loading with GNU Parallel in more detail but it fits well with this discussion.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;parallel&lt;/code&gt; command is very flexible and can take some time to understand but a simple&lt;/p&gt;
&lt;p&gt;In a previous post I provided an example of loading all Natural Earth vectors using &lt;code&gt;shp2pgsql&lt;/code&gt; so this time lets do the same with &lt;code&gt;ogr2ogr&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; find natural_earth_vector/10m_physical/ -name &lt;span class="s1"&gt;&amp;#39;*.shp&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; parallel &lt;span class="s2"&gt;&amp;quot;ogr2ogr -f PGDump \&lt;/span&gt;
&lt;span class="s2"&gt;                    --config PG_USE_COPY YES \&lt;/span&gt;
&lt;span class="s2"&gt;                    -lco schema=ne \&lt;/span&gt;
&lt;span class="s2"&gt;                    -lco create_schema=off \&lt;/span&gt;
&lt;span class="s2"&gt;                    /vsistdout/ {} \&lt;/span&gt;
&lt;span class="s2"&gt;                    -nlt PROMOTE_TO_MULTI | psql -U loader -d postgis&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="load-geometry-with-copy"&gt;
&lt;h3&gt;Load Geometry with COPY&lt;/h3&gt;
&lt;p&gt;If you have data in a delimited format such as CSV or TSV you can load it via COPY and have PostgreSQL create geometries on the fly by expressing the geometry as WKT or EWKT in your text file. The steps are very similar to those outlined above when using COPY:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create table with a geometry column&lt;/li&gt;
&lt;li&gt;Load source file via COPY&lt;/li&gt;
&lt;li&gt;Create indexes, vacuum etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an example lets load a CSV with details of WMS requests with the bounding box expressed as EWKT:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat requests1.csv
&lt;span class="m"&gt;2014&lt;/span&gt;-10-20 &lt;span class="m"&gt;06&lt;/span&gt;:33:24,elmbridge,wms,&lt;span class="s2"&gt;&amp;quot;SRID=27700;POLYGON((516601 163293, 516729 163293, 516729 163421, 516601 163421, 516601 163293))&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;2014&lt;/span&gt;-10-20 &lt;span class="m"&gt;06&lt;/span&gt;:33:32,surrey,wms,&lt;span class="s2"&gt;&amp;quot;SRID=27700;POLYGON((492801 166401, 499201 166401, 499201 172801, 492801 172801, 492801 166401))&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;2014&lt;/span&gt;-10-20 &lt;span class="m"&gt;06&lt;/span&gt;:38:09,exactrak,wms,&lt;span class="s2"&gt;&amp;quot;SRID=27700;POLYGON((206848 67200, 206976 67200, 206976 67328, 206848 67328, 206848 67200))&amp;quot;&lt;/span&gt;
...

psql -U loader -d postgis
drop table &lt;span class="k"&gt;if&lt;/span&gt; exists requests&lt;span class="p"&gt;;&lt;/span&gt;
create table requests&lt;span class="o"&gt;(&lt;/span&gt;reqtime timestamp, org text, service text, bbox geometry&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="se"&gt;\c&lt;/span&gt;opy requests FROM &lt;span class="s1"&gt;&amp;#39;requests1.csv&amp;#39;&lt;/span&gt; DELIMITER &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; CSV&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; populate_geometry_columns&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="command-line"></category><category term="postgis"></category><category term="notes"></category></entry><entry><title>Practical OpenLayers 3 &amp; Leaflet</title><link href="https://longwayaround.org.uk/notes/practical-openlayers-3-leaflet/" rel="alternate"></link><published>2014-09-07T21:30:00+01:00</published><updated>2014-09-07T21:30:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2014-09-07:/notes/practical-openlayers-3-leaflet/</id><summary type="html">&lt;p&gt;I ran a 2 hour workshop at &lt;a class="reference external" href="http://www.nottingham.ac.uk/osgis/home.aspx"&gt;OSGIS 2014&lt;/a&gt; introducing OpenLayers 3 and
Leaflet.&lt;/p&gt;
&lt;blockquote&gt;
A hands on introduction to using OpenLayer 3 (OL3) and Leaflet to display
spatial data on the web. The workshop will introduce the two libraries, the
underpinning concepts and strengths of each, and take delegates through â€¦&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I ran a 2 hour workshop at &lt;a class="reference external" href="http://www.nottingham.ac.uk/osgis/home.aspx"&gt;OSGIS 2014&lt;/a&gt; introducing OpenLayers 3 and
Leaflet.&lt;/p&gt;
&lt;blockquote&gt;
A hands on introduction to using OpenLayer 3 (OL3) and Leaflet to display
spatial data on the web. The workshop will introduce the two libraries, the
underpinning concepts and strengths of each, and take delegates through
creating a series of examples.&lt;/blockquote&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://astuntechnology.github.io/osgis-ol3-leaflet/"&gt;full workshop documentation is available&lt;/a&gt; if you'd like to follow
along at home.&lt;/p&gt;
</content><category term="workshop"></category><category term="ol3"></category><category term="leaflet"></category><category term="notes"></category></entry><entry><title>GNU Parallel all the things!</title><link href="https://longwayaround.org.uk/notes/gnu-parallel-all-the-things/" rel="alternate"></link><published>2014-07-17T19:45:00+01:00</published><updated>2014-07-17T19:45:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2014-07-17:/notes/gnu-parallel-all-the-things/</id><summary type="html">&lt;p&gt;I've been doing a lot of data processing recently and have been looking for a way of running bulk data loads into PostGIS in parallel to make use of all available cores. The work has mainly revolved around loading national cover of Ordnance Survey OS MasterMap and VectorMap Local for â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been doing a lot of data processing recently and have been looking for a way of running bulk data loads into PostGIS in parallel to make use of all available cores. The work has mainly revolved around loading national cover of Ordnance Survey OS MasterMap and VectorMap Local for &lt;a class="reference external" href="http://astuntechnology.com/"&gt;Astun Tech's&lt;/a&gt; base map services using &lt;a class="reference external" href="https://github.com/AstunTechnology/Loader"&gt;Loader&lt;/a&gt;. Loader doesn't have any parallel processing baked in but a &lt;a class="reference external" href="https://github.com/AstunTechnology/Loader/commit/199e66f7064e341b1365eb10a3d5a572b45b7fdb"&gt;small change to how it creates it's temporary directory&lt;/a&gt; allows multiple instance to be ran in parallel each processing a single file at a time. The key component to enable this is &lt;a class="reference external" href="http://www.gnu.org/software/parallel/"&gt;GNU Parallel&lt;/a&gt;, from the projects homepage:&lt;/p&gt;
&lt;blockquote&gt;
GNU parallel is a shell tool for executing jobs in parallel using one or more computers. A job can be a single command or a small script that has to be run for each of the lines in the input. The typical input is a list of files, a list of hosts, a list of users, a list of URLs, or a list of tables. A job can also be a command that reads from a pipe. GNU parallel can then split the input and pipe it into commands in parallel.&lt;/blockquote&gt;
&lt;p&gt;The way I've been using Parallel with Loader is to build a list of files to process using &lt;tt class="docutils literal"&gt;find&lt;/tt&gt; which is piped to &lt;tt class="docutils literal"&gt;parallel&lt;/tt&gt; which handles executing as many processes as there are cores (by default). For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /var/data/osmm/ -type f -print0 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
parallel -0 python loader.py loader.config &lt;span class="s2"&gt;&amp;quot;src_dir={}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this approach on an 8 core EC2 server with SSD volumes national OS MasterMap Topography Layer can be loaded over a weekend.&lt;/p&gt;
&lt;p&gt;Another example of using &lt;tt class="docutils literal"&gt;parallel&lt;/tt&gt; would be to build on the bash one-liner that Tim Sutton posted a while back to &lt;a class="reference external" href="http://linfiniti.com/2012/03/another-bash-one-liner-load-all-natural-earth-layers-into-postgis-in-one-go/"&gt;load all natural earth layers into PostGIS in one go&lt;/a&gt;. Tim's original command used &lt;tt class="docutils literal"&gt;find&lt;/tt&gt; to build a list of files then loops over the list and runs &lt;tt class="docutils literal"&gt;shp2pgsql&lt;/tt&gt; for each piping the output to &lt;tt class="docutils literal"&gt;psql&lt;/tt&gt; to do the actual load. Here's the original command tweaked slightly to exclude the &lt;tt class="docutils literal"&gt;tools&lt;/tt&gt; directory and specify the encoding including timing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; FILE in &lt;span class="sb"&gt;`&lt;/span&gt;find . -name &lt;span class="s1"&gt;&amp;#39;*.shp&amp;#39;&lt;/span&gt; -not -path &lt;span class="s2"&gt;&amp;quot;./tools/*&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="nv"&gt;$FILE&lt;/span&gt; .shp&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
shp2pgsql -W LATIN1 -s &lt;span class="m"&gt;4326&lt;/span&gt; -I &lt;span class="nv"&gt;$FILE&lt;/span&gt; world.&lt;span class="nv"&gt;$BASE&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; psql&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;

real        6m14.569s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example below is the equivalent using &lt;cite&gt;parallel&lt;/cite&gt; which significantly reduces load time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; find . -name &lt;span class="s1"&gt;&amp;#39;*.shp&amp;#39;&lt;/span&gt; -not -path &lt;span class="s2"&gt;&amp;quot;./tools/*&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; parallel &lt;span class="s2"&gt;&amp;quot;shp2pgsql -W LATIN1 -s 4326 -I {} world.{/.} | psql&amp;quot;&lt;/span&gt;

real        3m11.030s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again &lt;tt class="docutils literal"&gt;find&lt;/tt&gt; is used to build a list of input shapefiles which are piped to &lt;tt class="docutils literal"&gt;parallel&lt;/tt&gt; which builds and executes the &lt;tt class="docutils literal"&gt;shp2pgsql&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;psql&lt;/tt&gt; combination. By default &lt;tt class="docutils literal"&gt;parallel&lt;/tt&gt; provides the &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; replacement string for the current argument (file path in this case) and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{/.}&lt;/span&gt;&lt;/tt&gt; which strips the path and extension from when the replacement string is a file path.&lt;/p&gt;
</content><category term="command-line"></category><category term="postgis"></category><category term="notes"></category></entry><entry><title>First few months of Clojure</title><link href="https://longwayaround.org.uk/notes/first-few-months-of-clojure/" rel="alternate"></link><published>2014-02-18T19:42:00+00:00</published><updated>2014-02-18T19:42:00+00:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2014-02-18:/notes/first-few-months-of-clojure/</id><summary type="html">&lt;p&gt;I've been learning a bit of Lisp on and off for a few years, I first read (about half of) &lt;a class="reference external" href="http://landoflisp.com/"&gt;Land of Lisp&lt;/a&gt;, then &lt;a class="reference external" href="http://www.gigamonkeys.com/book/"&gt;Practical Lisp&lt;/a&gt; then I came across &lt;a class="reference external" href="http://clojure.org/"&gt;Clojure&lt;/a&gt; a modern Lisp that runs on the JVM and since I've been reading &lt;a class="reference external" href="http://www.clojurebook.com/"&gt;Clojure Programming&lt;/a&gt; and working through &lt;a class="reference external" href="https://github.com/walkermatt/clojure-koans"&gt;koans â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been learning a bit of Lisp on and off for a few years, I first read (about half of) &lt;a class="reference external" href="http://landoflisp.com/"&gt;Land of Lisp&lt;/a&gt;, then &lt;a class="reference external" href="http://www.gigamonkeys.com/book/"&gt;Practical Lisp&lt;/a&gt; then I came across &lt;a class="reference external" href="http://clojure.org/"&gt;Clojure&lt;/a&gt; a modern Lisp that runs on the JVM and since I've been reading &lt;a class="reference external" href="http://www.clojurebook.com/"&gt;Clojure Programming&lt;/a&gt; and working through &lt;a class="reference external" href="https://github.com/walkermatt/clojure-koans"&gt;koans&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/walkermatt/yellow_belt_clojure_katas"&gt;katas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've also built a small Clojure library and command-line app &lt;a class="reference external" href="https://github.com/walkermatt/gridref"&gt;GridRef&lt;/a&gt; to convert between an Ordnance Survey GB grid reference and British National Grid coordinates. While I was at it I built a web API &lt;a class="reference external" href="https://github.com/walkermatt/gridref-web"&gt;GridRef Web&lt;/a&gt; which exposes the conversion functions via a &lt;a class="reference external" href="https://github.com/ring-clojure/ring"&gt;Ring&lt;/a&gt; web app, hosted on Heroku and available at &lt;a class="reference external" href="http://gridref.longwayaround.org.uk/"&gt;http://gridref.longwayaround.org.uk/&lt;/a&gt;. Having a real (all be it small) project to work on has helped massively in learning and while I found the move from Python and JavaScript initially challenging I'm finding that I'm now thinking more functionally elsewhere.&lt;/p&gt;
&lt;p&gt;A few months in I'm really enjoying working with Clojure which feels like a thoughtfully designed language that incorporates sound theory in a practical way. The way the language and tooling favour interactive development really suits (especially &lt;a class="reference external" href="https://github.com/technomancy/leiningen"&gt;lein&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/tpope/vim-fireplace"&gt;vim-fireplace&lt;/a&gt;) and I'm really drawn to the Lisp everything is an expression and code-as-data principles.&lt;/p&gt;
&lt;p&gt;What little contact I've had with the community as been positive, it feels like a community of bright individuals from a range of backgrounds which give it enthusiasm and a healthy balance.&lt;/p&gt;
&lt;p&gt;I was a bit hesitant of it being hosted on the JVM at first and it does suffer in places from the &amp;quot;window into hell&amp;quot; syndrome where you are exposed to the guts of the implementation but the infrastructure provided by the JVM seems to largely make up for this.&lt;/p&gt;
&lt;p&gt;I'm sure Clojure is likely to my language of choice for a while, I'm now looking forward to getting on to exploring some of it's key features such as concurrency which I've only scratched the surface of so far.&lt;/p&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Some links to resources I've found useful or interesting while learning the basics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://learnxinyminutes.com/docs/clojure/"&gt;Learn Clojure in Y minutes&lt;/a&gt; - very brief overview of the language basics by example&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/technomancy/leiningen"&gt;Leiningen&lt;/a&gt; - installing Leiningen will set up a sane Clojure enviroment for you and provide access to a Clojure Read Eval Print Loop via &lt;tt class="docutils literal"&gt;lein repl&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://clojuredocs.org"&gt;ClojureDocs&lt;/a&gt; - community documentation site&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.braveclojure.com/"&gt;Clojure for the Brave and True&lt;/a&gt; -  witty book for beginners&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/walkermatt/yellow_belt_clojure_katas"&gt;Yellow belt Clojure katas&lt;/a&gt; - a handful of small exercises to learn from&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/walkermatt/clojure-koans"&gt;Clojure Koans&lt;/a&gt; - a much more extensive set of exercises&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://reddit.com/r/clojure"&gt;reddit.com/r/clojure&lt;/a&gt; - Clojure community on Reddit&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/walkermatt/clojure-intro"&gt;Intro to Clojure&lt;/a&gt; - brief intro based on learnxinyminutes.com/docs/clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="command-line"></category><category term="clojure"></category><category term="notes"></category></entry><entry><title>Custom GeoServer GetFeatureInfo Template</title><link href="https://longwayaround.org.uk/notes/custom-geoserver-getfeatureinfo-template/" rel="alternate"></link><published>2013-10-18T17:24:00+01:00</published><updated>2013-10-18T17:24:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2013-10-18:/notes/custom-geoserver-getfeatureinfo-template/</id><summary type="html">&lt;p&gt;The default  &lt;a class="reference external" href="http://geoserver.org/"&gt;GeoServer&lt;/a&gt; GetFeatureInfo Freemarker template is a simple table and doesn't work very well when displaying the content in a web map popup. It's a common requirement to change the GetFeatureInfo template to an unordered list, to capitalise the title and attribute names. Here is a sample &lt;cite&gt;content.ftl â€¦&lt;/cite&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The default  &lt;a class="reference external" href="http://geoserver.org/"&gt;GeoServer&lt;/a&gt; GetFeatureInfo Freemarker template is a simple table and doesn't work very well when displaying the content in a web map popup. It's a common requirement to change the GetFeatureInfo template to an unordered list, to capitalise the title and attribute names. Here is a sample &lt;cite&gt;content.ftl&lt;/cite&gt; that does just that and converts any attrubute values starting with &lt;cite&gt;http&lt;/cite&gt; into a link:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;#list features as feature&amp;gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;h2&amp;gt;&lt;/span&gt;${feature.type.title}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;#list feature.attributes as attribute&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;#if !attribute.isGeometry&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;${attribute.name?replace(&amp;quot;_&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;i&amp;quot;)?cap_first}:
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;#if attribute.value?starts_with(&amp;#39;http&amp;#39;)&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${attribute.value}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;${attribute.value}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;#else&amp;gt;
        ${attribute.value}
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/#if&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/#if&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/#list&amp;gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/#list&amp;gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the &lt;a class="reference external" href="http://docs.geoserver.org/stable/en/user/tutorials/freemarker.html"&gt;GeoServer Freemarker tutorial&lt;/a&gt; for details of where the content template needs to live. The &lt;a class="reference external" href="http://freemarker.org/docs/"&gt;Freemaker Documentation&lt;/a&gt; is comprehensive if you're interested in further customisation.&lt;/p&gt;
</content><category term="geoserver"></category><category term="notes"></category></entry><entry><title>Using Leaflet with a custom projection and a MapProxy TMS</title><link href="https://longwayaround.org.uk/notes/using-leaflet-with-a-custom-projection-and-a-mapproxy-tms/" rel="alternate"></link><published>2012-07-02T21:06:00+01:00</published><updated>2012-07-02T21:06:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2012-07-02:/notes/using-leaflet-with-a-custom-projection-and-a-mapproxy-tms/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update 2014-09-07&lt;/strong&gt; I've just ran a workshop based on the Astun Leaflet &amp;amp; and
ol3 examples at &lt;a class="reference external" href="http://www.nottingham.ac.uk/osgis/home.aspx"&gt;OSGIS 2014&lt;/a&gt;,
see &lt;a class="reference external" href="/notes/practical-openlayers-3-leaflet/"&gt;Practical OpenLayers 3 &amp;amp; Leaflet&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2014-05-15&lt;/strong&gt; For examples of displaying a Web Map Service (WMS) layer
in a custom projection (EPSG:27700) within Leaflet and OpenLayers 3 (ol3) see â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update 2014-09-07&lt;/strong&gt; I've just ran a workshop based on the Astun Leaflet &amp;amp; and
ol3 examples at &lt;a class="reference external" href="http://www.nottingham.ac.uk/osgis/home.aspx"&gt;OSGIS 2014&lt;/a&gt;,
see &lt;a class="reference external" href="/notes/practical-openlayers-3-leaflet/"&gt;Practical OpenLayers 3 &amp;amp; Leaflet&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2014-05-15&lt;/strong&gt; For examples of displaying a Web Map Service (WMS) layer
in a custom projection (EPSG:27700) within Leaflet and OpenLayers 3 (ol3) see:
&lt;a class="reference external" href="https://github.com/AstunTechnology/astun-leaflet-examples"&gt;astun-leaflet-examples&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/AstunTechnology/astun-ol3-examples"&gt;astun-ol3-examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2012-12-18&lt;/strong&gt; I've update the &lt;a class="reference external" href="https://gist.github.com/3034742"&gt;Gist&lt;/a&gt;
to reflect changes in v0.4 of Leaflet, in particular the fact that the
scale function now belongs to the CRS object instead of the Map and the
way that the TileLayer scheme is specified has changed to simply &lt;tt class="docutils literal"&gt;tms: true&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://leaflet.cloudmade.com/"&gt;Leaflet&lt;/a&gt; is a lightweight JavaScript
slippy map client well suited to use on mobile devices. Itâ€™s seen as an
alternative to &lt;a class="reference external" href="http://openlayers.org/"&gt;OpenLayers&lt;/a&gt; but takes a
different approach focusing on a small easy to use set of features.&lt;/p&gt;
&lt;p&gt;By default Leaflet allow you to display a map in one of the common
projections used to display tiles in the Google and
&lt;a class="reference external" href="http://www.openstreetmap.org/"&gt;OSM&lt;/a&gt; tile schemes and the vast
majority of examples you see use these. It is however possible to use
another projection such as a local projection like British National Grid
thanks to &lt;a class="reference external" href="https://github.com/kartena/Proj4Leaflet"&gt;Proj4Leaflet&lt;/a&gt;
which allows you to provide a &lt;a class="reference external" href="http://trac.osgeo.org/proj/"&gt;Proj4&lt;/a&gt;
projection definition and Transformation and scale functions which map
projected coordinates to grid coordinates at a given zoom.&lt;/p&gt;
&lt;p&gt;Setting up the definition is straight forward thanks to
&lt;a class="reference external" href="http://spatialreference.org"&gt;spatialreference.org&lt;/a&gt; which allows you
to look-up most projections and their definitions. In my case the
Transformation and scale functions also turned out to be simple after a
little trial and error.&lt;/p&gt;
&lt;p&gt;Iâ€™ve been using a TMS layer provided by one of the MapProxy instances
that form part of Astun Data Services, the configuration of which was as
simple as providing a URL template and setting the &lt;tt class="docutils literal"&gt;TileLayer&lt;/tt&gt; scheme
to &lt;tt class="docutils literal"&gt;tms&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Iâ€™ve posted an example JavaScript snippet as a GitHub Gist with some
notes here:
&lt;a class="reference external" href="https://gist.github.com/3034742"&gt;https://gist.github.com/3034742&lt;/a&gt;&lt;/p&gt;
</content><category term="leaflet"></category><category term="mapproxy"></category></entry><entry><title>Greyscale maps with MapServer</title><link href="https://longwayaround.org.uk/notes/greyscale-maps-with-mapserver/" rel="alternate"></link><published>2012-02-02T21:31:00+00:00</published><updated>2012-02-02T21:31:00+00:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2012-02-02:/notes/greyscale-maps-with-mapserver/</id><summary type="html">&lt;p&gt;There have been a few times in the past (such as when I was preparing the base mapping for &lt;a class="reference external" href="http://mywycombe.wycombe.gov.uk/?tab=2"&gt;My Wycombe&lt;/a&gt;) when I've wanted to create greyscale base mapping using &lt;a class="reference external" href="http://mapserver.org"&gt;MapServer&lt;/a&gt;. Previously I've experimented with various processing options for raster images (with varying degrees of success), converting the source images â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;There have been a few times in the past (such as when I was preparing the base mapping for &lt;a class="reference external" href="http://mywycombe.wycombe.gov.uk/?tab=2"&gt;My Wycombe&lt;/a&gt;) when I've wanted to create greyscale base mapping using &lt;a class="reference external" href="http://mapserver.org"&gt;MapServer&lt;/a&gt;. Previously I've experimented with various processing options for raster images (with varying degrees of success), converting the source images using &lt;a class="reference external" href="www.imagemagick.org"&gt;ImageMagick&lt;/a&gt; and converting colour RGB values to their greyscale equivalent for vector features and it's generally been time consuming.  Today the requirement came up again and I discovered a far simpler option: specifying a greyscale palette as an OUTPUTFORMAT FORMATOPTION.  The palette simply contains grey values from 0,0,0 (black) to 255,255,255 (white) and all values in between. MapServer then does the job of converting the colours for your source data into their greyscale equivalents.&lt;/p&gt;
&lt;p&gt;In the map file specify an &lt;a class="reference external" href="http://mapserver.org/mapfile/outputformat.html"&gt;OUTPUTFORMAT&lt;/a&gt; that used a specific palette:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Specify a plain PNG output with a
# greyscale palette
IMAGETYPE &amp;quot;AGG_PNG&amp;quot;
OUTPUTFORMAT
    NAME  &amp;quot;AGG_PNG&amp;quot;
    DRIVER  &amp;quot;AGG/PNG&amp;quot;
    MIMETYPE &amp;quot;image/png&amp;quot;
    IMAGEMODE &amp;quot;RGB&amp;quot;
    EXTENSION &amp;quot;png&amp;quot;
    FORMATOPTION &amp;quot;INTERLACE=OFF&amp;quot;
    FORMATOPTION &amp;quot;PALETTE_FORCE=ON&amp;quot;
    FORMATOPTION &amp;quot;PALETTE=grey.txt&amp;quot;
END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Snippet from the palette file (&lt;a class="reference external" href="/files/grey.txt"&gt;download the full version&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0,0,0
1,1,1
2,2,2
--- you get the idea ---
253,253,253
254,254,254
255,255,255
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BTW I used the following Python to generate the values for the palette:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="mapserver"></category></entry><entry><title>Disaggregate MultiLineStrings using ST_Dump PostGIS</title><link href="https://longwayaround.org.uk/notes/disaggregate-multilinestrings-using-st_dump-postgis/" rel="alternate"></link><published>2011-11-24T21:39:00+00:00</published><updated>2011-11-24T21:39:00+00:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2011-11-24:/notes/disaggregate-multilinestrings-using-st_dump-postgis/</id><summary type="html">&lt;p&gt;PostGIS the spatial extension to the PostgreSQL database provides a host of functions for querying, creating and manipulating geometries within the database. ST_Dump allows you to disaggregate collection and multi geometries such as MultiPolygon and MultiLineSting easily. The example below demonstrates starting with a table that contains one row with â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;PostGIS the spatial extension to the PostgreSQL database provides a host of functions for querying, creating and manipulating geometries within the database. ST_Dump allows you to disaggregate collection and multi geometries such as MultiPolygon and MultiLineSting easily. The example below demonstrates starting with a table that contains one row with a MultiLineString geometry and another with a LineString and running a query to disaggregate returning three rows all with a LineString geometry.&lt;/p&gt;
&lt;p&gt;Create a table for our demo data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;complex&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Insert one row with a MultiLineString with two parts ('Bob') and another with a single LineString ('Harry')&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;complex&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_GeomFromEWKT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MULTILINESTRING((498376.89 651569.6,498372.28 651571.89),(498372.28 651571.89,498371.77 651576.05))&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;complex&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Harry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_GeomFromEWKT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINESTRING(598376.89 751569.6,398372.75 658771.03)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Query to show we have two rows one of which has a MultiLineString geometry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ST_GeometryType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;geom_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ST_AsEWKT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;geom_wkt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="2%" /&gt;
&lt;col width="4%" /&gt;
&lt;col width="18%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="62%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;name&lt;/th&gt;
&lt;th class="head"&gt;geom&lt;/th&gt;
&lt;th class="head"&gt;geom_type&lt;/th&gt;
&lt;th class="head"&gt;geom_wkt&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;010500000002000000010200...&lt;/td&gt;
&lt;td&gt;ST_MultiLineString&lt;/td&gt;
&lt;td&gt;MULTILINESTRING((498376.89 651569.6,498372.28 651571.89),(498372.28 651571.89,498371.77 651576.05))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Harry&lt;/td&gt;
&lt;td&gt;0102000000020000007B14AE...&lt;/td&gt;
&lt;td&gt;ST_LineString&lt;/td&gt;
&lt;td&gt;LINESTRING(598376.89 751569.6,598372.28 751571.89)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Use the ST_Dump function to split the row with a MultiLineString into two rows each with a LineString and generate a decimal id composed of the original rows id and the LineString's position in the MultiLineString as the fractional part so that each row still has a unique id that's derived from it's original id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
  &lt;span class="n"&gt;COALESCE&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_geom&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;ST_GeometryType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;geom_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;ST_AsEWKT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;geom_wkt&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;dumped&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dumped&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom_dump&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;simple_geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dumped&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom_dump&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ST_Dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;geom_dump&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;complex&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dumped&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="5%" /&gt;
&lt;col width="6%" /&gt;
&lt;col width="26%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="48%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;name&lt;/th&gt;
&lt;th class="head"&gt;geom&lt;/th&gt;
&lt;th class="head"&gt;geom_type&lt;/th&gt;
&lt;th class="head"&gt;geom_wkt&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;010200000002000000F6285C...&lt;/td&gt;
&lt;td&gt;ST_LineString&lt;/td&gt;
&lt;td&gt;LINESTRING(498376.89 651569.6,498372.28 651571.89)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;010200000002000000EC51B8...&lt;/td&gt;
&lt;td&gt;ST_LineString&lt;/td&gt;
&lt;td&gt;LINESTRING(498372.28 651571.89,498371.77 651576.05)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Harry&lt;/td&gt;
&lt;td&gt;0102000000020000007B14AE...&lt;/td&gt;
&lt;td&gt;ST_LineString&lt;/td&gt;
&lt;td&gt;LINESTRING(598376.89 751569.6,598372.28 751571.89)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="postgis"></category></entry><entry><title>Recursively delete empty directories</title><link href="https://longwayaround.org.uk/notes/recursively-delete-empty-directories/" rel="alternate"></link><published>2011-03-28T10:31:00+01:00</published><updated>2011-03-28T10:31:00+01:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2011-03-28:/notes/recursively-delete-empty-directories/</id><summary type="html">&lt;p&gt;To recursively delete all empty directories from the command prompt in Windows. Open command prompt and change to the desired directory then enter the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; /F &lt;span class="s2"&gt;&amp;quot;tokens=*&amp;quot;&lt;/span&gt; %f in &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dir /AD /S /B ^| sort /R&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; rd &lt;span class="s2"&gt;&amp;quot;%f&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command generates a list of all directories and sub â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;To recursively delete all empty directories from the command prompt in Windows. Open command prompt and change to the desired directory then enter the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; /F &lt;span class="s2"&gt;&amp;quot;tokens=*&amp;quot;&lt;/span&gt; %f in &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dir /AD /S /B ^| sort /R&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; rd &lt;span class="s2"&gt;&amp;quot;%f&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command generates a list of all directories and sub directories below the current directory in bare format (just the path) sorted in reverse order. The remove directory command (rd) is then called for each item in the list. The rd command will only delete empty directories so those directories containing files or other directories will not be deleted.&lt;/p&gt;
</content><category term="command-line"></category><category term="notes"></category></entry><entry><title>Convert a directory of TIFFs to greyscale using ImageMagick</title><link href="https://longwayaround.org.uk/notes/convert-a-directory-of-tiffs-to-greyscale-using-imagemagick/" rel="alternate"></link><published>2011-01-07T17:53:00+00:00</published><updated>2011-01-07T17:53:00+00:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2011-01-07:/notes/convert-a-directory-of-tiffs-to-greyscale-using-imagemagick/</id><content type="html">&lt;p&gt;Change to the directory then run the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mogrify -colorspace Gray *.tif
&lt;/pre&gt;&lt;/div&gt;
</content><category term="command-line"></category><category term="notes"></category></entry><entry><title>Build OGR 1.8 with GML, WFS and PostGIS support on Ubuntu 10.04</title><link href="https://longwayaround.org.uk/notes/build-ogr-18-with-gml-wfs-and-postgis-support-on-ubuntu-1004/" rel="alternate"></link><published>2010-12-19T21:06:00+00:00</published><updated>2010-12-19T21:06:00+00:00</updated><author><name>walkermatt</name></author><id>tag:longwayaround.org.uk,2010-12-19:/notes/build-ogr-18-with-gml-wfs-and-postgis-support-on-ubuntu-1004/</id><summary type="html">&lt;p&gt;OGR 1.8 introduces support for reading GML with feature attributes expressed as nested elements as found in Ordnance Survey's OS MasterMap as well as support for accessing WFS. This is a brief script for building OGR (GDAL) 1.8 from source as it's not currently released: Download latest daily â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;OGR 1.8 introduces support for reading GML with feature attributes expressed as nested elements as found in Ordnance Survey's OS MasterMap as well as support for accessing WFS. This is a brief script for building OGR (GDAL) 1.8 from source as it's not currently released: Download latest daily source export: &lt;a class="reference external" href="http://www.gdal.org/daily/"&gt;http://www.gdal.org/daily/&lt;/a&gt; and extract it's contents to a directory you have read, write and execute permissions in (I chose ~/Software/gdal-svn-trunk-2010.12.19) Ensure you have the tools required to build software using &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install the development package for Xerces-C:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libxerces-c-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install the PostgreSQL development tools package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libpq-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install curl and the development package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install curl libcurl4-gnutls-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change to the directory where you extracted the GDAL source (that's ~/Software/gdal-svn-trunk-2010.12.19 for me):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Software/gdal-svn-trunk-2010.12.19
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the configure script which prepares the ground before we build GDAL with &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;. Here we are specifying that we want to configure the build to include xerces support and PostgreSQL (/usr/bin/pg_config is a script provided with the PostgreSQL development tools package).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure --with-xerces&lt;span class="o"&gt;=&lt;/span&gt;yes --with-pg&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/pg_config --with-curl&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/curl-config &amp;gt; configure-output.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can actually build GDAL/OGR:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make &amp;gt; make-output.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Providing make did not error GDAL should now be built and ready to use.  You can find the executable utilities such as gdalinfo, ogrinfo, ogr2ogr etc. in the apps directory within the directory that you extracted the GDAL source (~/Software/gdal-svn-trunk-2010.12.19/apps/ogr2ogr for me.); to make it easier to run these utilities it may be worthwhile setting a variable to this path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;GDAL_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Software/gdal-svn-trunk-2010.12.19/apps/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's also worth setting the GDAL_DATA environment variable so that resources such as coordinate system definitions etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GDAL_DATA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$GDAL_PATH&lt;/span&gt;../data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then use the utilities like so: Translate from GML to ESRI Shape. To parse nested feature attributes you will need to modify the .gfs file generated the first time the GML file is opened. The .gfs file allows you to map GML properties to feature attributes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$GDAL_PATH&lt;/span&gt;/ogr2ogr -f &lt;span class="s1"&gt;&amp;#39;ESRI Shapefile&amp;#39;&lt;/span&gt; . test.gml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Translate GML to PostGIS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$GDAL_PATH&lt;/span&gt;/ogr2ogr -f PostgreSQL PG:&lt;span class="s2"&gt;&amp;quot;dbname=&amp;#39;postgis&amp;#39; active_schema=mapbase host=&amp;#39;localhost&amp;#39; user=&amp;#39;fred&amp;#39; password=&amp;#39;itscomplicated&amp;#39;&amp;quot;&lt;/span&gt; test.gml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;List available layers from a WFS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$GDAL_PATH&lt;/span&gt;/ogrinfo -ro WFS:&lt;span class="s2"&gt;&amp;quot;http://www.tinyows.org/cgi-bin/tinyows&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Get info about all features in a given layer including coordinates&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$GDAL_PATH&lt;/span&gt;/ogrinfo WFS:&lt;span class="s2"&gt;&amp;quot;http://www.tinyows.org/cgi-bin/tinyows&amp;quot;&lt;/span&gt; tows:world -ro -al
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Download all features from a layer and write to a good old ESRI Shape file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$GDAL_PATH&lt;/span&gt;/ogr2ogr -f &lt;span class="s1"&gt;&amp;#39;ESRI Shapefile&amp;#39;&lt;/span&gt; . WFS:&lt;span class="s2"&gt;&amp;quot;http://www.tinyows.org/cgi-bin/tinyows&amp;quot;&lt;/span&gt; tows:world
&lt;/pre&gt;&lt;/div&gt;
</content><category term="gml"></category><category term="ogr"></category><category term="postgis"></category><category term="wfs"></category></entry></feed>